basePath: /apis
definitions:
  enums.Role:
    enum:
    - ADMIN
    - USER
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  handlers.LoginInput:
    properties:
      email_or_username:
        example: heepoke
        type: string
      password:
        example: "64765555"
        type: string
    required:
    - email_or_username
    - password
    type: object
  handlers.RegisterInput:
    properties:
      email:
        example: aaa@gmail.com
        type: string
      password:
        example: "64765555"
        type: string
      role:
        $ref: '#/definitions/enums.Role'
      tel:
        example: "0000000000"
        type: string
      username:
        example: heepoke
        type: string
    required:
    - email
    - password
    - role
    - tel
    - username
    type: object
  handlers.UserInput:
    properties:
      email:
        example: aaa@gmail.com
        type: string
      password:
        example: "64765555"
        type: string
      role:
        $ref: '#/definitions/enums.Role'
      tel:
        example: "0000000000"
        type: string
      username:
        example: heepoke
        type: string
    required:
    - email
    - role
    - tel
    - username
    type: object
host: localhost:6476
info:
  contact:
    email: damon1FX@gmail.com
    name: API Support
    url: https://github.com/HEEPOKE
  description: This is a Go Echo Hexagonal API server.
  title: Go Echo Hexagonal API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: login
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Login
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Logout
      tags:
      - Auth
  /auth/refresh-token:
    get:
      consumes:
      - application/json
      description: Refreah Token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Refreah Token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Register
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/handlers.RegisterInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Register
      tags:
      - Auth
  /users/all:
    get:
      consumes:
      - application/json
      description: Get list all Users
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Get list all Users
      tags:
      - Users
  /users/create:
    post:
      consumes:
      - application/json
      description: Create Users
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreateUsers
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/handlers.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
      summary: Create Users
      tags:
      - Users
schemes:
- http
- https
swagger: "2.0"
